{
  "comments": [
    {
      "key": {
        "uuid": "c1d49649_5354d482",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000074
      },
      "writtenOn": "2019-10-24T19:49:35Z",
      "side": 1,
      "message": "Scott, if I change \"4096\" here to len(pay), all the integration tests fail, telling me that the payload is not being allocated of sufficient size (this is what I tried asking via email). If I change it to 4096 as it is here, it works. Any ideas?",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ac55d59_f91ad419",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000074
      },
      "writtenOn": "2019-10-24T19:50:49Z",
      "side": 1,
      "message": "meaning:\n\nsbuf \u003d rmr.rmr_alloc_msg(self.mrc, len(pay), pay, True, work_item[\"msg type\"])",
      "parentUuid": "c1d49649_5354d482",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58a6377c_e4d66657",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000074
      },
      "writtenOn": "2019-10-24T19:53:25Z",
      "side": 1,
      "message": "note, I am using the new fancy alloc from rmr-python 1.0.0",
      "parentUuid": "8ac55d59_f91ad419",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4b5e5bd_ffb8a2ec",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2019-10-24T20:02:55Z",
      "side": 1,
      "message": "Still looking at this.  The memmove() in rmr.py is what is complaining?",
      "parentUuid": "58a6377c_e4d66657",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1e65cee_033aad25",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000074
      },
      "writtenOn": "2019-10-24T20:07:27Z",
      "side": 1,
      "message": "no nothing is complaining; it\u0027s \"working\" but not working; whatever the receiver gets isn\u0027t what\u0027s intended",
      "parentUuid": "b4b5e5bd_ffb8a2ec",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4145f00b_0222b242",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2019-10-24T20:19:02Z",
      "side": 1,
      "message": "what happens if you set gen transaction to false?  Wonder if that is overwriting something.  I just ran the send example in the rmr repo to verify that the payload length was correct that that looks good.  I\u0027ll try the same here.  The gen-and-set xaction function looks ok unless the size constant is wrong.  If I don\u0027t see anything with that, I\u0027ll have to set up a send/receive test to see what\u0027s actually arriving.",
      "parentUuid": "d1e65cee_033aad25",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "933cb450_2d77df9a",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2019-10-24T20:22:44Z",
      "side": 1,
      "message": "xaction field looks ok -- 32 bytes which is the right size.",
      "parentUuid": "4145f00b_0222b242",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1dcee761_ac6dd5e3",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000074
      },
      "writtenOn": "2019-10-24T20:25:14Z",
      "side": 1,
      "message": "don\u0027t strain yourself tonight; tomorrow morning ill try to rig my tests with more debugging to try to narrow in on the problem; but, just noting, simply replacing this 4096 with len(pay) deterministically fails the tests. \nill report back tmrw./",
      "parentUuid": "933cb450_2d77df9a",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "980f13c4_3ec966a9",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000074
      },
      "writtenOn": "2019-10-24T21:25:46Z",
      "side": 1,
      "message": "I am seeing this log in a1:\n\n2019-10-24 21:20:26,221 [a1.a1rmr    ] DEBUG    (\u0027Dropping malformed or non applicable message\u0027, {\u0027payload\u0027: b\u0027{\"policy_type_id\": 20000, \"policy_instance_id\": \"admission_control_policy\", \"handler_id\": \"test_r\neceiver\", \"status\"\u0027, \u0027payload length\u0027: 115, \u0027message type\u0027: 21024, \u0027subscription id\u0027: -1, \u0027transaction id\u0027: b\u0027182cfc88f6a411e9837a9afe524d51a5\u0027, \u0027message state\u0027: 0, \u0027message status\u0027: \u0027RMR_OK\u0027, \u0027payload max si\nze\u0027: 115, \u0027meid\u0027: b\u0027\u0027, \u0027message source\u0027: \u0027testreceiver-6f7b7f4755-4b8zq:4560\u0027, \u0027errno\u0027: 0})\n\n\nThat payload is seriously bonked; \n\nb\u0027{\"policy_type_id\": 20000, \"policy_instance_id\": \"admission_control_policy\", \"handler_id\": \"test_receiver\", \"status\"\n\nis a JSON that is cut off\n\nmy new theory is that, it\u0027s actually the 10 change I made\n\nthe original buffer of 4096... might be getting reused for the receiver reply, the reciever reply fits in it, and it works.. but when the send buffer is too small, the receiver reply doesn\u0027t fit in it?? let me try that..",
      "parentUuid": "1dcee761_ac6dd5e3",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ff2e53a_0db96791",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000074
      },
      "writtenOn": "2019-10-24T21:38:11Z",
      "side": 1,
      "message": "hmmmmm that didn\u0027t fix it either, but the logs look better.\n\ndoes rts depend on the original sbuf? if so, i\u0027m really not sure how to proceed; allocating a new buffer with proper space for the reply, doesn\u0027t seem to work with rts, and the intial buffer doesn\u0027t have enough space for the reply. suggestions?",
      "parentUuid": "980f13c4_3ec966a9",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34af3c9d_398b5fe9",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1000074
      },
      "writtenOn": "2019-10-24T19:55:41Z",
      "side": 1,
      "message": "btw, an orthognal code cleanup comment; I alloc and free each time in the loop, because send perverts the buffer; is there a way to do this better?\n\nis it \"functional\" where I can do\n\npost_send_sbuf \u003d send(mrc, sbuf) #does sbuf get mutated here?",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a4bdc63_55841590",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2019-10-24T20:02:55Z",
      "side": 1,
      "message": "In most cases post_send_sbuf will be the same struct, and will reference a \u0027clean\u0027 buffer for you to fill in.  That is provided that your next message is the same or smaller than the previous message.  Because you\u0027re allocating based on message length, and no padding, the free/allocs you\u0027re doing are probably the best.",
      "parentUuid": "34af3c9d_398b5fe9",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f44eb10_45c7a1d5",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1000074
      },
      "writtenOn": "2019-10-24T20:11:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3a4bdc63_55841590",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": false
    }
  ]
}