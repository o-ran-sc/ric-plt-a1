{
  "comments": [
    {
      "key": {
        "uuid": "c1d49649_5354d482",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000074
      },
      "writtenOn": "2019-10-24T19:49:35Z",
      "side": 1,
      "message": "Scott, if I change \"4096\" here to len(pay), all the integration tests fail, telling me that the payload is not being allocated of sufficient size (this is what I tried asking via email). If I change it to 4096 as it is here, it works. Any ideas?",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ac55d59_f91ad419",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000074
      },
      "writtenOn": "2019-10-24T19:50:49Z",
      "side": 1,
      "message": "meaning:\n\nsbuf \u003d rmr.rmr_alloc_msg(self.mrc, len(pay), pay, True, work_item[\"msg type\"])",
      "parentUuid": "c1d49649_5354d482",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58a6377c_e4d66657",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000074
      },
      "writtenOn": "2019-10-24T19:53:25Z",
      "side": 1,
      "message": "note, I am using the new fancy alloc from rmr-python 1.0.0",
      "parentUuid": "8ac55d59_f91ad419",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4b5e5bd_ffb8a2ec",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2019-10-24T20:02:55Z",
      "side": 1,
      "message": "Still looking at this.  The memmove() in rmr.py is what is complaining?",
      "parentUuid": "58a6377c_e4d66657",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1e65cee_033aad25",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1000074
      },
      "writtenOn": "2019-10-24T20:07:27Z",
      "side": 1,
      "message": "no nothing is complaining; it\u0027s \"working\" but not working; whatever the receiver gets isn\u0027t what\u0027s intended",
      "parentUuid": "b4b5e5bd_ffb8a2ec",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34af3c9d_398b5fe9",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1000074
      },
      "writtenOn": "2019-10-24T19:55:41Z",
      "side": 1,
      "message": "btw, an orthognal code cleanup comment; I alloc and free each time in the loop, because send perverts the buffer; is there a way to do this better?\n\nis it \"functional\" where I can do\n\npost_send_sbuf \u003d send(mrc, sbuf) #does sbuf get mutated here?",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a4bdc63_55841590",
        "filename": "a1/a1rmr.py",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2019-10-24T20:02:55Z",
      "side": 1,
      "message": "In most cases post_send_sbuf will be the same struct, and will reference a \u0027clean\u0027 buffer for you to fill in.  That is provided that your next message is the same or smaller than the previous message.  Because you\u0027re allocating based on message length, and no padding, the free/allocs you\u0027re doing are probably the best.",
      "parentUuid": "34af3c9d_398b5fe9",
      "revId": "32a7b2fec3cb8f1654fdc9ab7d441b39f58342da",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53",
      "unresolved": true
    }
  ]
}